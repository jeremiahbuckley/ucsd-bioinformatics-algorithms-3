#! /usr/bin/python3

import sys
import time
sys.setrecursionlimit(1500)


scores =[
[2, -2, 0, 0, -3, 1, -1, -1, -1, -2, -1, 0, 1, 0, -2, 1, 1, 0, -6, -3],
[-2, 12, -5, -5, -4, -3, -3, -2, -5, -6, -5, -4, -3, -5, -4, 0, -2, -2, -8, 0],
[0, -5, 4, 3, -6, 1, 1, -2, 0, -4, -3, 2, -1, 2, -1, 0, 0, -2, -7, -4],
[0, -5, 3, 4, -5, 0, 1, -2, 0, -3, -2, 1, -1, 2, -1, 0, 0, -2, -7, -4],
[-3, -4, -6, -5, 9, -5, -2, 1, -5, 2, 0, -3, -5, -5, -4, -3, -3, -1, 0, 7],
[1, -3, 1, 0, -5, 5, -2, -3, -2, -4, -3, 0, 0, -1, -3, 1, 0, -1, -7, -5],
[-1, -3, 1, 1, -2, -2, 6, -2, 0, -2, -2, 2, 0, 3, 2, -1, -1, -2, -3, 0],
[-1, -2, -2, -2, 1, -3, -2, 5, -2, 2, 2, -2, -2, -2, -2, -1, 0, 4, -5, -1],
[-1, -5, 0, 0, -5, -2, 0, -2, 5, -3, 0, 1, -1, 1, 3, 0, 0, -2, -3, -4],
[-2, -6, -4, -3, 2, -4, -2, 2, -3, 6, 4, -3, -3, -2, -3, -3, -2, 2, -2, -1],
[-1, -5, -3, -2, 0, -3, -2, 2, 0, 4, 6, -2, -2, -1, 0, -2, -1, 2, -4, -2],
[0, -4, 2, 1, -3, 0, 2, -2, 1, -3, -2, 2, 0, 1, 0, 1, 0, -2, -4, -2],
[1, -3, -1, -1, -5, 0, 0, -2, -1, -3, -2, 0, 6, 0, 0, 1, 0, -1, -6, -5],
[0, -5, 2, 2, -5, -1, 3, -2, 1, -2, -1, 1, 0, 4, 1, -1, -1, -2, -5, -4],
[-2, -4, -1, -1, -4, -3, 2, -2, 3, -3, 0, 0, 0, 1, 6, 0, -1, -2, 2, -4],
[1, 0, 0, 0, -3, 1, -1, -1, 0, -3, -2, 1, 1, -1, 0, 2, 1, -1, -2, -3],
[1, -2, 0, 0, -3, 0, -1, 0, 0, -2, -1, 0, 0, -1, -1, 1, 3, 0, -5, -3],
[0, -2, -2, -2, -1, -1, -2, 4, -2, 2, 2, -2, -1, -2, -2, -1, 0, 4, -6, -2],
[-6, -8, -7, -7, 0, -7, -3, -5, -3, -2, -4, -4, -6, -5, 2, -2, -5, -6, 17, 0],
[-3, 0, -4, -4, 7, -5, 0, -1, -4, -1, -2, -2, -5, -4, -4, -3, -3, -2, 0, 10]
] #PAM250


sdict = {}
aminos = 'ACDEFGHIKLMNPQRSTVWY'

for i in aminos:
    sdict[i] = {}
    for j in aminos:
        sdict[i][j] = scores[aminos.index(i)][aminos.index(j)]
sigma = 5


def print_matrix(list_of_lists, str_h, str_v):
    height = len(list_of_lists)
    width = len(list_of_lists[0])

    #print()
    #print(len(str_v))
    #print(len(list_of_lists))
    print("           {0}".format("  ".join([ch.rjust(5) for ch in str_h])))
    for i in range(height):
        #print(list_of_lists[i])
        #print(str_v[i])
        #print()
        if i == 0:
            print("    {0}".format("  ".join([str(n).rjust(5) for n in list_of_lists[i]])))
        else:
            print("{0}   {1}".format(str_v[i-1], "  ".join([str(n).rjust(5) for n in list_of_lists[i]])))

def FCRBacktrack(v, w):
    n = len(v)
    m = len(w)
    Backtrack = [['' for j in range(m + 1)] for i in range(n + 1)]
    s = [[0 for j in range(m + 1)] for i in range(n + 1)]
    for i in range(n + 1):
        Backtrack[i][0] = '~'
    for j in range(m + 1):
        Backtrack[0][j] = '~'
    smax = 0
    si = 0
    sj = 0
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            match = sdict[v[i - 1]][w[j - 1]]
            s[i][j] = max(s[i - 1][j] - sigma, s[i][j - 1] - sigma, s[i - 1][j - 1] + match, 0)
            if s[i][j] == s[i - 1][j] - sigma:
                Backtrack[i][j] = 'd'
            elif s[i][j] == s[i][j - 1] - sigma:
                Backtrack[i][j] = 'r'
            elif s[i][j] == s[i - 1][j - 1] + match:
                Backtrack[i][j] = 'c'
            elif s[i][j] == 0:
                Backtrack[i][j] = '~'
            if s[i][j] >= smax:
                smax = s[i][j]
                si = i
                sj = j

    print_matrix(s, w, v)
    return Backtrack, si, sj

def OutputFCR(backtrack, v, w, i, j):
    if (i == 0) & (j == 0):
        return ['', '', 0]
    elif backtrack[i][j] == '~':
        return ['', '', 0]
    elif backtrack[i][j] == 'd':
        s1 = OutputFCR(backtrack, v, w, i - 1, j)
        return [s1[0] + v[i - 1], s1[1] + '-', s1[2] - sigma]
    elif backtrack[i][j] == 'r':
        s1 = OutputFCR(backtrack, v, w, i, j - 1)
        return [s1[0] + '-', s1[1] + w[j - 1], s1[2] - sigma]
    else:
        s1 = OutputFCR(backtrack, v, w, i - 1, j - 1)
        match =  +sdict[v[i - 1]][w[j - 1]]
        return [s1[0] + v[i - 1], s1[1] + w[j - 1], s1[2] + match]
    return None

v = 'CYDFHYTKPNNKRDAYPSIKQQFDQLIAILPHWMYSPAVRHNDDWKVHMDEIWFQHAGSSHMGCRAFDDSPPQGVRSSHQCNVMFDNPTLALTWIAEKMRPHDTVHLCHHVMWMIFSDDFWYYQLCWDSEMKRFLRTNSGGMAGHVDKMKHENMTDPCWCTNFTREIAKKTRLYNAKQTCHSPSWADTSQCEMKCHNDLHKNSGQAMRMCGESMLEMHNDCKKWTINAAGYWNLKTRMDISFPEIMSPMQNLSNNGRTPGRLQTDVVDFPLGVIEDQNNSWFDAHGTMNSNLYGHNQCEIHNYGHHMVPCCQDNVVENVPACYWKSGTQEDNIEKNNNGWFIYRLVKSQFDSDIGNVISCATCQYAPYYRAATEEKQVSDFLYKWARSWCTMMNPWAPLEFCINGIKHNYNELHSGIGGHNETNTAYRYMCWGYQWHFRDHYKFSWSPTITMSVADWHNRYPELCRDRNWHAEDFLATDYFTLMFNWGHGMAWESRAAVHFRDIGPFDFRPMPGDEAEECDCYFAWSWASPCFSERFLWWWYVHGDQERNGYKEIRYVNRHGFCNCMPYGNHTRTMPWGMRFFTYRNRQMNHCSVRNIVIFPSRHFWKSDPVDASPHYGNKCWFHIDWMYWLYGQLEEDSPAVDCGGKRQWMNISSMPLALKGMCLTPLRDRYSYNDDCYVINNKRCNFSENKAHWWWCRYGMFWNDGFVTMDYNVYKHVFDMRIVQQFRHQRHWGVDPFNHLIKTHIVVEQTGHEIGIAVHEIKRQTEAVSKEDSLQNATQCQSMWRHDPEWCDYHVFNGNIMWHIRHPYLGFQYITQWNEILEKKGSNHLDADSPCDNYILVKSQNNPLQHNQNFPVMEHCGRMYECRWAAASMKTLVRSYNLLCAKHERVGERVKYE'
w = 'KDGFHLLAWYEFTTKRSAVGQEQYDVHAYMPYGGHAFMWHHRIRDDFTRWFRLLSQACHNWLEEAFHTWRVFSFMAGWGKRWSMISQLGNSRSGECGEAWCLDCRLSVWMKMSIAMTNFYCFFSGDYRLSMSHICNMMVCMATERPQGNFVHWKWCCMWDFATSWKSWMCIIICFRIDSMAMAQFTRFKQSHFETRPSTCWEGLMDMRCFCKCRCHGPWVIYREFTGRYIGHHHWFNYIHLKGTEWFVTLQIYKDMAWQERHPKFITEDQTMNSNLYGHNQCEINCGHHMVVENDNRRMVWPACRQTPRYVVKSGTQEQGGIKNKICNQDHTKNNVAAIWPPVKEPDQFDSDGGNNISCATCYNAPYYRAVSDFLYCAMMNPWAPLGFCRNGIKHNYNELHYETSARLHGIGGHNETNTAYYQWHFLRDEHWADHYQFSWSPTITMSVADWHNRYCVELNRRNWHAEDFLATDYFTLMAYMINRNWGYGMWWESRYIYYIPFGDEAEECTNRLKRSRQCYFTSWTFSDGVWSDDFGASFSERFLWWWYVHTDFWQAEGNPQVQPLLNGYKAIRFMHFGLQWAVFHCHFRHGFCNCMPYGRQTLVMPPWGMRFFTYRKDRVMNHIASVRNIVIFPSRAWKSDPITLKGMYDPASPHYGNKTWFHCDQMYWPYGWCNPNRCCMNGFWTDAWYKDLTYPGAFETNKGMEGSGKMKHRDCILGRFWFTEQNTLYAGCPIQKHYVSTCHEPIFTAKTLPVICKTDDMPEQESHRMHDLPVSENAEEESTEAYDHSPWFLIKCECIRCKMFRYQQMALEWWGHMMEEATQPKFWNPVHTTSTEAMRPCSDSGGQRRLYQNLNAYVYHSSYLSKSRGRCHDVSVEIIIPWQGNTDTPTWHFMWINAALGHEHTCCYKMWCRNRCDVFDFTCHARQPLRHDFC'
v = 'ATGVWYYYYC'
w = 'GYYCFFF'

v = 'AAAAAASSSSSSSVVVVVVVVTTTTTTTLLLLLL'
w = 'SSSSLLLLLTTTTTTTWWWWWWWWWWWPPPPPPPPPP'

v = 'QTVHQIWMKRLASFFFSMMMRRLLQQSSSTTTFQQDWLLLLLSSSCCSPQPQPQTYTYTYTFFRRRSSMMMLNNNDNDKVWSKLLWPPPPQRMS'
w = 'TQDFFSMLRRAAQFFMMRLCCDPPPATATATFPFPMMMDSNSSSDNSQRRQRQRQTFTDTSTCCQVVMNFRMNFRVDFPLLK'


#YDFHYTKPNNK-RDAYPSIKQQFDQLIA-ILPHWMYSPAVRHN-DDW-KVHMD--EIWFQHAGSSHMGCRAFDDSPPQGVRSSHQCNVMFDNPTLALTWIAEKMRPHDTVHLCHHVMWMIFSDDF-WYYQLCW-DSEMKRFLRTNSGGMAGHVDKMK-HENMTD-PCWCTNFTREIAKKTRLYNAKQTCHSPSWADTSQ-CEMKCHNDLHKNSGQAMRMCGESMLEMHNDCKKWTINA-AGYWNLKTRMDISFPEIMSPMQNLSNNGRTPGRLQTDVVDFPLGVI-EDQNNSWFDAHGTMNSNLYGHNQCEIHNYGHHMVPCCQDNVVENV-PAC-----YW-KSGTQEDN-I-EK--N-NNGW--F--IYRLVK-S-QFDSDIGNVISCATCQY-APYYRAATEEKQVSDFLYKWARSWCTMMNPWAPLEFCINGIKHNYNELH---S----GIGGHNETNTAYRYMCWGYQW--HFRDHYKFSWSPTITMSVADWHNRY-PELCRDRNWHAEDFLATDYFTLM-F--N--WGHGMAWESRAAVHFRDIGPFDFRPMP-GDEAEEC-DCYFA-W--S---WA---SPCFSERFLWWWYVHGD--Q-E---R-----NGYKEIRY--------V-N---RHGFCNCMPYGNHTRTMP-WGMRFFTYR-NRQMNHC-SVRNIVIFPSRHFWKSDPV------D-ASPHYGNKCWFHIDWMYWLYGQLEEDSPAVDCGGKRQWMNISSMPLALKGMCLTPLRDRYSYNDDCYVINNKRCNFSENKAHWWWCRYGMFW-NDGFVTMDYNVYKHVFDMRIVQQFRHQRHWGVDPFNHLIKTHIVVEQTGHEI-GIAVHE-IKRQ-TEAVSKEDS-L-Q-NATQCQSMWR-HD-P-EWCDYHVFNGNI--M-WHIRHPYLGFQYITQ-WNEILEKKGSNHLDADSPCDN-YILVKSQNNPLQHNQNFPVM-E-HCG-RMYECRWAAASM-KTLVRSYNLLCAKHERVGERVKYE
#YEFT-TKRSAVGQEQY-DV-HAYMPYGGHAFM-W-HHR-IRDDFTRWFRLLSQACHNWLEEA-F-HTW-RVFS-FMA-G-WGKRW-S-MISQ--LGNSRSGECGEAW-CLD-CRLSVWMKMSIAMTNFY--CFFSGDY-RLSMSHICNMMVCMATERPQGNFVHWK-WCCMWDFATSWKSWMCII--ICFRIDSMAMAQFTRFK-QSHFETRPS-T---CWEGLMDMRCFCKCRCHGPWVIYREFTGRY-IGHHHWFNYIH-LKGTEWFVT-LQ--I--YK-DMAWQERHPKFITEDQTMNSNLYGHNQCEIN-CGHHMVV--ENDNRRMVWPACRQTPRYVVKSGTQEQGGIKNKICNQDHTKNNVAAIWPPVKEPDQFDSDGGNNISCATC-YNAPYYRA------VSDFLY------CAMMNPWAPLGFCRNGIKHNYNELHYETSARLHGIGGHNETNTAY-YQ-WHFLRDEHWADHYQFSWSPTITMSVADWHNRYCVELNR-RNWHAEDFLATDYFTLMAYMINRNWGYGMWWESRY-IYY--I-PFGDEAEECTNRLKRSRQCYFTSWTFSDGVWSDDFGASFSERFLWWWYVHTDFWQAEGNPQVQPLLNGYKAIRFMHFGLQWAVFHCHFRHGFCNCMPYGRQTLVMPPWGMRFFTYRKDRVMNHIASVRNIVIFPSRA-WKSDPITLKGMYDPASPHYGNKTWFHCDQMYWPYG-WC-N-PN-RCCMNGFWTD-AW--Y--KD--LT-----YP--GA-FETNKGM-EGSGKMKHRD-CILGRFWFTEQ-NTL-YAGC-PI-QKHYVSTC-HEPIFTAKTLPVICKTDDMPEQESHRMHDLPVSENAEEESTEAYDHSPWFLIKCECIRCK-MFRYQQMALEWWG-HMMEEATQPKFWNPVHT-TSTEAMRPCSDSGGQRRLYQNLNA-YVYHSSY-LSKSRGRCHDVSVEIIIPWQGNTDTPTWHFMWINAALGHEHTCCYKMWC-RN-RC-DVFDFT
# 1119

#1104
#YDFHYTKPNNK-RDAYPSIKQQFDQLIA-ILPHWMYSPAVRHN-DDW-KVHMD--EIWFQHAGSSHMGCRAFDDSPPQGVRSSHQCNVMFDNPTLALTWIAEKMRPHDTVHLCHHVMWMIFSDDF-WYYQLCW-DSEMKRFLRTNSGGMAGHVDKMK-HENMTD-PCWCTNFTREIAKKTRLYNAKQTCHSPSWADTSQ-CEMKCHNDLHKNSGQAMRMCGESMLEMHNDCKKWTINA-AGYWNLKTRMDISFPEIMSPMQNLSNNGRTPGRLQTDVVDFPLGVI-EDQNNSWFDAHGTMNSNLYGHNQCEIHNYGHHMVPCCQDNVVENV-PAC-----YW-KSGTQEDN-I-EK--N-NNGW--F--IYRLVK-S-QFDSDIGNVISCATCQY-APYYRAATEEKQVSDFLYKWARSWCTMMNPWAPLEFCINGIKHNYNELH---S----GIGGHNETNTAYRYMCWGYQW--HFRDHYKFSWSPTITMSVADWHNRY-PELCRDRNWHAEDFLATDYFTLM-F--N--WGHGMAWESRAAVHFRDIGPFDFRPMP-GDEAEEC-DCYFA-W--S---WA---SPCFSERFLWWWYVHGD--Q-E---R-----NGYKEIRY--------V-N---RHGFCNCMPYGNHTRTMP-WGMRFFTYR-NRQMNHC-SVRNIVIFPSRHFWKSDPV------D-ASPHYGNKCWFHIDWMYWLYGQLEEDSPAVDCGGKRQWMNISSMPLALKGMCLTPLRDRYSYNDDCYVINNKRCNFSENKAHWWWCRYGMFW-NDGFVTMDYNVYKHVFDMRIVQQFRHQRHWGVDPFNHLIKTHIVVEQTGHEI-GIAVHE-IKRQ-TEAVSKEDS-L-Q-NATQCQSMWR-HD-P-EWCDYHVFNGNI--M-WHIRHPYLGFQYITQ-WNEILEKKGSNHLDADSPCDN-YILVKSQNNPLQHNQNFPVM-E-HCG-RMYECRWAAASM-KTLVRSYNLLCAKHERVGERVKYE
#YDFHYTKPNNK-RDAYPSIKQQFDQLIA-ILPHWMYSPAVRHN-DDW-KVHMD--EIWFQHAGSSHMGCRAFDDSPPQGVRSSHQCNVMFDNPTLALTWIAEKMRPHDTVHLCHHVMWMIFSDDF-WYYQLCW-DSEMKRFLRTNSGGMAGHVDKMK-HENMTD-PCWCTNFTREIAKKTRLYNAKQTCHSPSWADTSQ-CEMKCHNDLHKNSGQAMRMCGESMLEMHNDCKKWTINA-AGYWNLKTRMDISFPEIMSPMQNLSNNGRTPGRLQTDVVDFPLGVI-EDQNNSWFDAHGTMNSNLYGHNQCEIHNYGHHMVPCCQDNVVENV-PAC-----YW-KSGTQEDN-I-EK--N-NNGW--F--IYRLVK-S-QFDSDIGNVISCATCQY-APYYRAATEEKQVSDFLYKWARSWCTMMNPWAPLEFCINGIKHNYNELH---S----GIGGHNETNTAYRYMCWGYQW--HFRDHYKFSWSPTITMSVADWHNRY-PELCRDRNWHAEDFLATDYFTLM-F--N--WGHGMAWESRAAVHFRDIGPFDFRPMP-GDEAEEC-DCYFA-W--S---WA---SPCFSERFLWWWYVHGD--Q-E---R-----NGYKEIRY--------V-N---RHGFCNCMPYGNHTRTMP-WGMRFFTYR-NRQMNHC-SVRNIVIFPSRHFWKSDPV------D-ASPHYGNKCWFHIDWMYWLYGQLEEDSPAVDCGGKRQWMNISSMPLALKGMCLTPLRDRYSYNDDCYVINNKRCNFSENKAHWWWCRYGMFW-NDGFVTMDYNVYKHVFDMRIVQQFRHQRHWGVDPFNHLIKTHIVVEQTGHEI-GIAVHE-IKRQ-TEAVSKEDS-L-Q-NATQCQSMWR-HD-P-EWCDYHVFNGNI--M-WHIRHPYLGFQYITQ-WNEILEKKGSNHLDADSPCDN-YILVKSQNNPLQHNQNFPVM-E-HCG-RMYECRWAAASM-KTLVRSYNLLCAKHERVGERVKYE
#YEFT-TKRSAVGQEQY-DV-HAYMPYGGHAFM-W-HHR-IRDDFTRWFRLLSQACHNWLEEA-F-HTW-RVFS-FMA-G-WGKRW-S-MISQ--LGNSRSGECGEAW-CLD-CRLSVWMKMSIAMTNFY--CFFSGDY-RLSMSHICNMMVCMATERPQGNFVHWK-WCCMWDFATSWKSWMCII--ICFRIDSMAMAQFTRFK-QSHFETRPS-T---CWEGLMDMRCFCKCRCHGPWVIYREFTGRY-IGHHHWFNYIH-LKGTEWFVT-LQ--I--YK-DMAWQERHPKFITEDQTMNSNLYGHNQCEIN-CGHHMVV--ENDNRRMVWPACRQTPRYVVKSGTQEQGGIKNKICNQDHTKNNVAAIWPPVKEPDQFDSDGGNNISCATC-YNAPYYRA------VSDFLY------CAMMNPWAPLGFCRNGIKHNYNELHYETSARLHGIGGHNETNTAY-YQ-WHFLRDEHWADHYQFSWSPTITMSVADWHNRYCVELNR-RNWHAEDFLATDYFTLMAYMINRNWGYGMWWESRY-IYY--I-PFGDEAEECTNRLKRSRQCYFTSWTFSDGVWSDDFGASFSERFLWWWYVHTDFWQAEGNPQVQPLLNGYKAIRFMHFGLQWAVFHCHFRHGFCNCMPYGRQTLVMPPWGMRFFTYRKDRVMNHIASVRNIVIFPSRA-WKSDPITLKGMYDPASPHYGNKTWFHCDQMYWPYG-WC-N-PN-RCCMNGFWTD-AW--Y--KD--LT-----YP--GA-FETNKGM-EGSGKMKHRD-CILGRFWFTEQ-NTL-YAGC-PI-QKHYVSTC-HEPIFTAKTLPVICKTDDMPEQESHRMHDLPVSENAEEESTEAYDHSPWFLIKCECIRCK-MFRYQQMALEWWG-HMMEEATQPKFWNPVHT-TSTEAMRPCSDSGGQRRLYQNLNA-YVYHSSY-LSKSRGRCHDVSVEIIIPWQGNTDTPTWHFMWINAALGHEHTCCYKMWC-RN-RC-DVFDFT
#YEFT-TKRSAVGQEQY-DV-HAYMPYGGHAFM-W-HHR-IRDDFTRWFRLLSQACHNWLEEA-F-HTW-RVFS-FMA-G-WGKRW-S-MISQ--LGNSRSGECGEAW-CLD-CRLSVWMKMSIAMTNFY--CFFSGDY-RLSMSHICNMMVCMATERPQGNFVHWK-WCCMWDFATSWKSWMCII--ICFRIDSMAMAQFTRFK-QSHFETRPS-T---CWEGLMDMRCFCKCRCHGPWVIYREFTGRY-IGHHHWFNYIH-LKGTEWFVT-LQ--I--YK-DMAWQERHPKFITEDQTMNSNLYGHNQCEIN-CGHHMVV--ENDNRRMVWPACRQTPRYVVKSGTQEQGGIKNKICNQDHTKNNVAAIWPPVKEPDQFDSDGGNNISCATC-YNAPYYRA------VSDFLY------CAMMNPWAPLGFCRNGIKHNYNELHYETSARLHGIGGHNETNTAY-YQ-WHFLRDEHWADHYQFSWSPTITMSVADWHNRYCVELNR-RNWHAEDFLATDYFTLMAYMINRNWGYGMWWESRY-IYY--I-PFGDEAEECTNRLKRSRQCYFTSWTFSDGVWSDDFGASFSERFLWWWYVHTDFWQAEGNPQVQPLLNGYKAIRFMHFGLQWAVFHCHFRHGFCNCMPYGRQTLVMPPWGMRFFTYRKDRVMNHIASVRNIVIFPSRA-WKSDPITLKGMYDPASPHYGNKTWFHCDQMYWPYG-WC-N-PN-RCCMNGFWTD-AW--Y--KD--LT-----YP--GA-FETNKGM-EGSGKMKHRD-CILGRFWFTEQ-NTL-YAGC-PI-QKHYVSTC-HEPIFTAKTLPVICKTDDMPEQESHRMHDLPVSENAEEESTEAYDHSPWFLIKCECIRCK-MFRYQQMALEWWG-HMMEEATQPKFWNPVHT-TSTEAMRPCSDSGGQRRLYQNLNA-YVYHSSY-LSKSRGRCHDVSVEIIIPWQGNTDTPTWHFMWINAALGHEHTCCYKMWC-RN-RC-DVFDFT

b, i, j  = FCRBacktrack(v, w)
vals = OutputFCR(b, v, w, i, j)

for i in range(3):
    print(vals[i])